from random import shuffle

suits = ("Hearts", "Clubs", "Diamonds", "Spades")
ranks = ("Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace")
values = {"Two": 2, "Three": 3, "Four": 4, "Five": 5, "Six": 6, "Seven": 7, "Eight": 8, "Nine": 9, "Ten": 10,
          "Jack": 10, "Queen": 10, "King": 10, "Ace": 11}

#this class creates a card of a particular suit and rank
class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
        self.value = values[rank]

#printing a card
    def __str__(self):
        return self.rank + " of " + self.suit

#this class creates a deck
class Deck:
    def __init__(self):
        self.cardlist = []

#creating a deck of cards
        for suit in suits:
            for rank in ranks:
                current_card = Card(rank, suit)
                self.cardlist.append(current_card)

#printing a deck
    def __str__(self):
        deck_cards = ''
        for x in range(len(self.cardlist)):
            deck_cards += self.cardlist[x].__str__() + "\n"
        return f"This Deck has {str(len(self.cardlist))} Cards.\n" + deck_cards

#function For shuffling a deck
    def shuffle_deck(self):
        shuffle(self.cardlist)
    def deal_one(self):

#function for dealing a card
        return self.cardlist.pop(0)

#this class is used to generate a player
class Player():
    def __init__(self, name, chips):
        self.name = name
        self.chips = chips
        self.bet = 0

#printing a player chips
    def __str__(self):
        print_statement = 'Player {} has {} chips\n'.format(self.name, self.chips)
        return print_statement

#adding chips to the player
    def add_chips(self, chips):
        self.chips += chips

#removing chips from the player
    def remove_chips(self, chips):
        if chips > self.chips:
            print("Unsufficient Chips.")
            print("Current balance = {}".format(self.chips))
        else:
            self.chips -= chips
            print("Current balance = {}".format(self.chips))

#this class is used to generate a hand for the player and the dealer
class Hand():
    def __init__(self):
        self.cards = []
        self.value = 0
        self.ace_count = 0

#printing a hand
    def __str__(self):
        cards_in_hand = 'Card list is : \n'
        for x in range(len(self.cards)):
            cards_in_hand += str(self.cards[x]) + "\n"
        return "This hand has a value of {}.\n\n".format(self.value) + cards_in_hand

#adding a card to a hand
    def add_card(self, card):
        self.cards.append(card)
        self.value += card.value
        if card.rank == "Ace":
            self.ace_count += 1
        while self.value > 21 and self.ace_count > 0:
            self.value -= 10
            self.ace_count -= 1

#function to take a bet from the player
def take_bet(player):
    while True:
        try:
            current_bet = int(input("How many Chips would you like to bet : "))
        except:
            print("Enter a Valid Number of Chips.")
        else:
            if current_bet > player.chips:
                print("Unsufficient Amount. Please try again.")
            else:
                player.bet += current_bet
                player.chips -= current_bet
                break

#function to create a player
def create_player():
    global player
    while True:
        player_name = input("\n\nEnter Your Name : ")
        if player_name != '':
            break
        else:
            print("Enter a valid name.\n")
    while True:
        try:
            start_amount = int(input("Enter starting number of Chips : "))
        except:
            print("Please Enter a valid Number.\n")
        else:
            break
    player = Player(player_name, start_amount)

#function to adjust chips at the end of the game
def adjust_winnings(winner):
    if winner == "player":
        player.chips += int(player.bet * 2.0)
        player.bet = 0
    elif winner == "tie":
        player.chips += player.bet
        player.bet = 0
    else:
        player.bet = 0

#function to give player a choice to HIT or STAND.
def hit_or_stand(player_hand, deck_1):
    global player_playing
    while True:
        temp = input("HIT OR STAND? : ")
        if temp == '':
            print("Please Choose a valid option.\n")
        if temp[0].lower() == 'h':
            player_hand.add_card(deck_1.deal_one())
            break
        elif temp[0].lower() == 's':
            player_playing = False
            break
        else:
            print("Please Choose a valid option.\n")
    if temp[0].lower() == 'h':
        return "h"
    else:
        return "s"

#final winner : dealer with player bust
def player_busted():
    global winner
    print("\nPlayer Busted.")
    print("Dealer Wins!\n")
    winner = "dealer"

#final winner : player with dealer bust
def dealer_busted():
    global winner
    print("\nDealer Busted.")
    print("Player Wins!\n")
    winner = "player"

#final winner : tie
def player_dealer_tie():
    global winner
    print("IT'S A TIE!!\n")
    winner = "tie"

#final winner : player
def player_wins():
    global winner
    print("Player Wins!\n")
    winner = "player"

#final winner : dealer
def dealer_wins():
    global winner
    print("Dealer Wins!")
    winner = "dealer"

#function to show both hands while hiding one of dealers Cards.
def show_some_cards(player_hand, dealer_hand):
    print("\nPlayer Cards are : ")
    for card in player_hand.cards:
        print("  " + str(card))
    print("\nDealer Cards are : ")
    print("  " + str(dealer_hand.cards[0]))
    print("**Card is Hidden**\n")
    print(
        "\n\n")

#function to show both hands
def show_all_cards(player_hand, dealer_hand):
    print("\nPlayer Cards are : ")
    for card in player_hand.cards:
        print("  " + str(card))
    print("\nDealer Cards are : ")
    for card in dealer_hand.cards:
        print("  " + str(card))
    print(
        "\n\n")

#starting the main game
def main(player):

#intitialize a deck of cards and shuffle them
    deck_1 = Deck()
    deck_1.shuffle_deck()

#create player and dealer hands
    player_hand = Hand()
    dealer_hand = Hand()
    print(
        "\n\n")
    print(player)

#take a bet
    take_bet(player)

#deal initial two cards
    player_hand.add_card(deck_1.deal_one())
    player_hand.add_card(deck_1.deal_one())
    dealer_hand.add_card(deck_1.deal_one())
    dealer_hand.add_card(deck_1.deal_one())

#show player cards and hide the second dealer card
    show_some_cards(player_hand, dealer_hand)

#asking the player to hit or stand
    player_playing = True
    while player_playing == True:
        if player_hand.value == 21:
            break
        if player_hand.value > 21:
            player_busted()
            break
        req = hit_or_stand(player_hand, deck_1)
        if req == 's':
            break
        show_some_cards(player_hand, dealer_hand)
    show_all_cards(player_hand, dealer_hand)

#dealers turn
    dealer_playing = True
    while dealer_playing:
        if player_hand.value <= 21:
            while dealer_hand.value < 17:
                print("\nDealer Hits......")
                dealer_hand.add_card(deck_1.deal_one())
                show_all_cards(player_hand, dealer_hand)
            dealer_playing = False
            if dealer_hand.value > 21:
                dealer_busted()
                break
            elif player_hand.value == dealer_hand.value:
                player_dealer_tie()
                break
            elif player_hand.value > dealer_hand.value:
                player_wins()
                break
            else:
                dealer_wins()
                break
        else:
            break
    adjust_winnings(winner)
    print("\n" + str(player))

#asking the player to play again
def play_again():
    while True:
        print(
            "\n\n")
        temp = input("\nWant to play again? : ")
        if temp[0].lower() == 'y':
            return True
            break
        elif temp[0].lower() == 'n':
            print(
                "\n\n")
            print("\nThank You for playing\n")
            print(
                "\n")
            return False
            break
        else:
            print("Please Choose a valid option.\n")

#main function
if __name__ == '__main__':
    playing = True
    create_player()
    while playing:
        main(player)
        playing = play_again()
